<!DOCTYPE html>
<html>
  <head>
    <title>Makers</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap-reboot.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap-grid.min.css">
    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body class="<%= @body_class %>">
    <div class="container tac">
      <div class="standard header home">
        <div class="row">
          <%= render partial: 'shared/nav' %>
        </div>
      </div>
      <a href="#" class="logo">
        <%= image_tag "logo.svg", alt: "Makers Program" %>
        <p class="tecbrand">sponsored by Innovaction Gym</p>
      </a>
      <h2 class="tagline">¿Qué quieres crear hoy?</h2>
      <div class="QueryBuilder">
        <div class="row no-gutters">
          <div class="col">
            <p class="stmt">Quiero</p>
          </div>
          <div class="col">
            <div class="tagBox" id="capabilities"></div>
            <input type="text" name="capacidad" placeholder="capacidad" id="query-capacidades" class="fuzzy-input">
          </div>
          <div class="col">
            <p class="stmt">usando</p>
          </div>
          <div class="col">
            <div class="tagBox" id="materials"></div>
            <input type="text" name="material" placeholder="material" id="query-materiales" class="fuzzy-input">
          </div>
          <div class="col">
            <a href="#" class="highlight large btn searchBtn" role="button">Buscar</a>
          </div>
        </div>
      </div>
      <section class="queryOptionsContainer" id="results"> </section>
      <footer class="homeFooter">
        <p>
          o consulta el <%= link_to equipment_index_path do %>
            <%= content_tag :strong, "catálogo de equipos".html_safe, :class => "bold" %>
          <% end %>
        </p>
      </footer>
      <%= render partial: 'shared/search' %>
    </div>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <script>
      // Container for pills returned from a query
      const $pillBox = $('.queryOptionsContainer');
      // Input box for capacities
      const $queryCap = $("#query-capacidades");
      // Input box for materials
      const $queryMat = $("#query-materiales");
      // Container for selected capacity
      const $selectedCap = $(".tagBox#capabilities");
      // Container for selected material
      const $selectedMat = $(".tagBox#materials");

      // Retuns the HTML to render pills
      function getHTMLForPills(results, type) {
        return results.map(r => {
          return `<div data-id="${r.id}" data-type="${type}" class="pill white">${r.name}</div>`;
        });
      }

      // Creates the pills for the items in results (array)
      function draw(results, type) {
        let pillsHTML = getHTMLForPills(results, type);
        $pillBox.html(pillsHTML);
      }

      // Returns a function that makes a query for the type specified
      // ("capabilities" or "materials")
      const processQueryOnCollection = function(type) {
        return function() {
          // Get the value to query
          const query = $(this).val().trim().toLowerCase();
          // Get the item selected for the other type
          let selectedItem;
          if (type == "capabilities") {
            selectedItem = $(":first-child", $selectedMat).attr('data-id');
          } else {
            selectedItem = $(":first-child", $selectedCap).attr('data-id');
          }
          $.ajax({
            url: "/home/related",
            method: "GET",
            dataType: "json",
            data: {query: query, selectedItem: selectedItem, type: type},
            error: function (xhr, status, error) {
              console.error('AJAX Error: ' + status + error);
            },
            success: function (response) {
              draw(response.results, type);
            }
          });
        };
      };

      const filterCapabilities = processQueryOnCollection('capabilities').bind($queryCap);
      const filterMaterials = processQueryOnCollection('materials').bind($queryMat);

      // Creates pills for capabilities and materials
      function showAllPills() {
        $.ajax({
          url: "/home/related",
          method: "GET",
          dataType: "json",
          data: {type : 'all'},
          error: function (xhr, status, error) {
            console.error('AJAX Error: ' + status + error);
          },
          success: function (response) {
            // Removes the selected capability if there's one
            capabilities_results = $.grep(response.capabilities, function(r) {
              return r.id != $(":first-child", $selectedCap).attr('data-id');
            });
            // Removes the selected material if there's one
            materials_results = $.grep(response.materials, function(r) {
              return r.id != $(":first-child", $selectedMat).attr('data-id');
            });
            capabilitiesHTML = getHTMLForPills(capabilities_results, "capabilities");
            materialsHTML = getHTMLForPills(materials_results, "materials");
            $pillBox.html(capabilitiesHTML.concat(materialsHTML));
          }
        });
      }

      // Render all pills when the page first loads
      showAllPills();

      // Event handlers
      $queryCap.on('input', filterCapabilities);
      $queryMat.on('input', filterMaterials);
      $queryCap.on('focus', filterCapabilities);
      $queryMat.on('focus', filterMaterials);
      $pillBox.on('click', '.pill.white', onOptionClick);

      // Removes the clicked pill from the options and puts it in the container of selected pill
      function onOptionClick() {
        let $pill = $(this).remove();
        if ($pill.data('type') == 'capabilities') {
          $selectedCap.empty();
          $selectedCap.append($pill);
          $queryMat.focus();
          $queryCap.hide();
        }
        else {
          $selectedMat.empty();
          $selectedMat.append($pill);
          $queryCap.focus();
          $queryMat.hide();
        }
        $pill.on('click', onSelectedOptionClick);
        // If a pill has been selected for materials and capabilities, show all pills again
        if ($selectedMat.children().length > 0 && $selectedCap.children().length > 0) {
          showAllPills();
        }
      }

      // Removes the clicked pill from the container
      function onSelectedOptionClick() {
        $(this).parent().next().show();
        $(this).parent().next().focus();
        let $pill = $(this).remove();
      }

      function submitForm() {
        const capabilities = $('.tagBox#capabilities .pill').toArray().map(p => p.textContent.trim()).join(',');
        const materials = $('.tagBox#materials .pill').toArray().map(p => p.textContent.trim()).join(',');
        $('#materials_query').val(materials);
        $('#capabilities_query').val(capabilities);
        $('.search-form').submit();
      }

      $('.searchBtn').click(function(e) {
        e.preventDefault();
        submitForm();
      });

    </script>
    <%= yield(:scripts) if content_for?(:scripts)  %> </body>

    <% flash.discard %>
  </body>
</html>
