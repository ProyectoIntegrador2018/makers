<%#
# Form Partial

This partial is rendered on a resource's `new` and `edit` pages,
and renders all form fields for a resource's editable attributes.

## Local variables:

- `page`:
  An instance of [Administrate::Page::Form][1].
  Contains helper methods to display a form,
  and knows which attributes should be displayed in the resource's form.

[1]: http://www.rubydoc.info/gems/administrate/Administrate/Page/Form
%>

<%= form_for([namespace, page.resource], html: { class: "LabForm" }) do |f| %>

  <% if page.resource.errors.any? %>
    <div id="error_explanation">
      <h2>
        <%= t(
          "administrate.form.errors",
          pluralized_errors: pluralize(page.resource.errors.count, t("administrate.form.error")),
          resource_name: display_resource_name(page.resource_name)
        ) %>
      </h2>

      <ul>
        <% page.resource.errors.full_messages.each do |message| %>
          <li class="flash-error"><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="row firstrow">
    <div class="col-5">
      <div class="uploadPhoto va-p">
        <p class="text valign"><span class="large">+</span> <br> Agrega una imagen</p>
      </div>
      <%= f.file_field :image, :class => 'hidden', :id=>'imginput' %>
    </div>
    <div class="col-7">
      <div>
        <%= f.text_field :name, placeholder: "Nombre del laboratorio", :class => 'txtinput large'%>
      </div>
      <div>
        <%= f.text_field :description, placeholder: "Descripción", :class => 'txtinput', :id=>"desc" %>
      </div>
      <div>
        <%= f.text_field :location, placeholder: "Ubicación",  :class => 'txtinput' %>
      </div>
      <div>
        <%= f.select :user_id, User.all.collect { |p| [p.given_name, p.id] }, include_blank: true,  :class => 'txtinput' %>
      </div>
    </div>
  </div>

  <div class="d-flex justify-content-end">
    <%= f.submit 'Guardar'%>
  </div>

<% end %>

<% content_for(:javascript) do %>
  <script>
    $('.uploadPhoto').click(function() {
      $('#imginput').click();
    });

    $('#imginput').on('change', function(e) {
      if(e.target.files.length <= 0) {
        console.log('failed files');
        return false;
      }
      let file = e.target.files[0];
      if(!(file.type === "image/jpeg" || file.type === "image/png")) {
        console.log('Failed type');
        return false;
      }
      if(file.size > 1024*1024) { // max file size: 1 MiB
        console.log('Failed size');
        alert('File is too big. Please choose a smaller file. Max. file size allowed: 1 MB.');
        return false;
      }
      const fr = new FileReader();
      fr.onload = function(e) {
        let img = document.createElement('img');
        img.file = file;
        img.src = e.target.result;
        img.classList.add('valign');
        img.width = 120;
        $uploadPhoto = $('.uploadPhoto');
        $uploadPhoto.find('img').remove();
        $uploadPhoto.addClass('with-photo').append(img);
      };
      fr.onerror = function(e) {
        console.error(e);
      };
      fr.readAsDataURL(file);
    });
  </script>
<% end %>
